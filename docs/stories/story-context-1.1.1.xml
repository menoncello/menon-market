<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.1</storyId>
    <title>Agent Type Definitions</title>
    <status>Ready</status>
    <generatedAt>2025-10-26</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>stories/story-1.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>System Architect</asA>
    <iWant>define and implement the 7 specialized agent types with role-based capabilities</iWant>
    <soThat>the ClaudeCode SuperPlugin ecosystem has foundational agents for all development roles</soThat>
    <tasks>- [ ] Task 1: Define Agent Schema and Types (AC: 1, 2)
  - [ ] Subtask 1.1: Create AgentDefinition TypeScript interface
  - [ ] Subtask 1.2: Define 7 specialized agent types with role specifications
  - [ ] Subtask 1.3: Create agent configuration templates for each type
- [ ] Task 2: Implement Agent Creation Service (AC: 1, 3, 5)
  - [ ] Subtask 2.1: Build Agent Type Definitions Service in agent-creator package
  - [ ] Subtask 2.2: Implement template generation for agent configurations
  - [ ] Subtask 2.3: Optimize agent generation for &lt;30s performance target
- [ ] Task 3: Create Validation Framework (AC: 4, 6)
  - [ ] Subtask 3.1: Implement agent configuration validation
  - [ ] Subtask 3.2: Create testing framework for agent types
  - [ ] Subtask 3.3: Add support for custom agent type validation
- [ ] Task 4: Integrate with Claude Code (AC: 7)
  - [ ] Subtask 4.1: Implement Task tool delegation interface
  - [ ] Subtask 4.2: Create subagent registration and discovery
  - [ ] Subtask 4.3: Test agent creation and execution workflow</tasks>
  </story>

  <acceptanceCriteria>1. Create 7 agent types (FrontendDev, BackendDev, QA, Architect, CLI Dev, UX Expert, SM) with complete role definitions
2. Define agent schemas including role definition, goals, backstory, core skills, and learning mode for each agent type
3. Implement agent generation service that creates agents in &lt;30 seconds per agent
4. Support custom agent types beyond predefined 7 agent types with validation framework
5. Create template-based agent generation with customization options and configuration parameters
6. Implement agent configuration validation with comprehensive testing framework
7. Ensure Claude Code integration with native subagent architecture and Task tool delegation</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="tech-spec-epic-1.md" title="Technical Specification - Epic 1" section="AC001" snippet="Create 7 agent types with complete role definitions, agent generation service &lt;30s, validation framework, Claude Code integration" />
      <doc path="architecture.md" title="ClaudeCode SuperPlugin Architecture" section="Subagent System" snippet="Native Claude Code subagents with Task tool delegation protocol, agent type definitions with specializations and core skills" />
      <doc path="PRD.md" title="Product Requirements Document" section="FR001" snippet="Agent Creator System with 7 agent types, template-based generation with customization, comprehensive testing framework" />
    </docs>
    <code>
      <!-- No existing code artifacts found for this story -->
    </code>
    <dependencies>
      <dependency ecosystem="Node.js" packages="typescript, @claude-code/task, @claude-code/episodic-memory, zod, yaml" />
    </dependencies>
  </artifacts>

  <constraints>
    <constraint source="tech-spec-epic-1.md" type="performance" rule="Agent generation time &lt;30 seconds" />
    <constraint source="tech-spec-epic-1.md" type="architecture" rule="Follow Claude Code native subagent architecture" />
    <constraint source="tech-spec-epic-1.md" type="security" rule="Agent isolation and memory encryption" />
    <constraint source="tech-spec-epic-1.md" type="testing" rule="100% automated testing with 90% unit coverage" />
  </constraints>

  <interfaces>
    <interface name="AgentCreationAPI" kind="REST" signature="POST /api/v1/agents/create" path="packages/agent-creator/src/api.ts" />
    <interface name="AgentDefinition" kind="TypeScript" signature="interface AgentDefinition" path="packages/core/src/agents/types.ts" />
    <interface name="TaskDelegation" kind="Claude Code" signature="Task tool delegation interface" path="packages/core/src/orchestration/task-delegation.ts" />
  </interfaces>

  <tests>
    <standards>Use Jest for unit testing (90% coverage target), Vitest for integration testing, comprehensive validation framework for agent configurations. All tests must be automated with no manual testing steps.</standards>
    <locations>tests/unit/agent-creator/, tests/integration/agent-creation/, packages/agent-creator/__tests__/</locations>
    <ideas>
      <idea ac="1">Test agent creation for all 7 predefined types &lt;30s performance target</idea>
      <idea ac="2">Validate agent configuration against AgentDefinition schema</idea>
      <idea ac="3">Test custom agent type creation and validation</idea>
      <idea ac="4">Test Claude Code Task tool delegation integration</idea>
      <idea ac="5">Test agent template generation with customization options</idea>
      <idea ac="6">Test error handling and rollback scenarios</idea>
      <idea ac="7">Performance testing for concurrent agent creation</idea>
    </ideas>
  </tests>
</story-context>