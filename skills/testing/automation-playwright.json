{
  "id": "automation-playwright",
  "name": "Test Automation with Playwright",
  "description": "Comprehensive test automation skill using Playwright for end-to-end testing of web applications. Includes browser automation, test organization, parallel execution, and integration with CI/CD pipelines.",
  "domain": "testing",
  "category": "e2e-testing",
  "version": "1.0.0",
  "dependencies": [
    {
      "skillId": "javascript-modern-es6",
      "minVersion": "1.0.0",
      "required": true,
      "reason": "Modern JavaScript knowledge is required for Playwright test development"
    },
    {
      "skillId": "typescript-fundamentals",
      "minVersion": "1.0.0",
      "required": true,
      "reason": "TypeScript support enhances test reliability and maintainability"
    }
  ],
  "compatibility": [
    {
      "agentRole": "QA",
      "level": "full",
      "enhancements": [
        "Advanced test automation patterns",
        "Performance testing capabilities",
        "Cross-browser testing expertise",
        "CI/CD integration knowledge"
      ]
    },
    {
      "agentRole": "FrontendDev",
      "level": "partial",
      "restrictions": [
        "Focus on testing user interface components and interactions"
      ],
      "enhancements": [
        "Understanding of E2E testing patterns",
        "Integration with development workflow"
      ]
    },
    {
      "agentRole": "BackendDev",
      "level": "limited",
      "restrictions": [
        "Focus on API testing within E2E scenarios"
      ],
      "enhancements": [
        "Understanding of backend testing in browser context",
        "API mocking and stubbing knowledge"
      ]
    }
  ],
  "capabilities": [
    {
      "id": "browser-automation",
      "name": "Browser Automation",
      "description": "Automate web browser interactions including clicks, typing, navigation, and element manipulation",
      "type": "action",
      "implementation": {
        "approach": "Use Playwright's page object model and locator strategies for reliable element interaction",
        "tools": ["Playwright", "Browser locators", "Page object pattern"],
        "performance": {
          "complexity": "medium",
          "resourceUsage": "medium"
        }
      }
    },
    {
      "id": "test-organization",
      "name": "Test Organization",
      "description": "Structure tests using fixtures, hooks, and descriptive test patterns",
      "type": "pattern",
      "implementation": {
        "approach": "Organize tests with describe/test blocks, custom fixtures, and beforeEach/afterEach hooks",
        "tools": ["Playwright test runner", "Test fixtures", "Custom hooks"],
        "performance": {
          "complexity": "low",
          "resourceUsage": "low"
        }
      }
    },
    {
      "id": "assertions-and-validations",
      "name": "Assertions and Validations",
      "description": "Implement comprehensive assertions for UI elements, API responses, and application state",
      "type": "action",
      "implementation": {
        "approach": "Use Playwright's expect API with custom matchers and soft assertions",
        "tools": ["Playwright expect", "Custom matchers", "Soft assertions"],
        "performance": {
          "complexity": "medium",
          "resourceUsage": "low"
        }
      }
    },
    {
      "id": "parallel-execution",
      "name": "Parallel Test Execution",
      "description": "Execute tests in parallel across multiple browsers and configurations",
      "type": "action",
      "implementation": {
        "approach": "Configure Playwright for parallel execution with worker processes and browser sharding",
        "tools": ["Playwright parallel execution", "Worker processes", "Browser sharding"],
        "performance": {
          "complexity": "medium",
          "resourceUsage": "high"
        }
      }
    },
    {
      "id": "test-data-management",
      "name": "Test Data Management",
      "description": "Manage test data using factories, fixtures, and database seeding",
      "type": "action",
      "implementation": {
        "approach": "Create reusable test data factories and manage data lifecycle through test hooks",
        "tools": ["Test factories", "Database seeding", "Data fixtures"],
        "performance": {
          "complexity": "medium",
          "resourceUsage": "medium"
        }
      }
    },
    {
      "id": "visual-testing",
      "name": "Visual Testing",
      "description": "Implement visual regression testing to detect UI changes and layout issues",
      "type": "action",
      "implementation": {
        "approach": "Use Playwright's visual comparison capabilities with proper baseline management",
        "tools": ["Playwright screenshots", "Visual comparison", "Baseline management"],
        "performance": {
          "complexity": "medium",
          "resourceUsage": "high"
        }
      }
    },
    {
      "id": "ci-cd-integration",
      "name": "CI/CD Integration",
      "description": "Integrate Playwright tests into CI/CD pipelines with proper reporting and artifact management",
      "type": "action",
      "implementation": {
        "approach": "Configure test execution in CI environments with HTML reports and video recordings",
        "tools": ["GitHub Actions", "GitLab CI", "Docker", "HTML reports"],
        "performance": {
          "complexity": "complex",
          "resourceUsage": "high"
        }
      }
    }
  ],
  "examples": [
    {
      "title": "E-commerce Application Testing",
      "scenario": "Create comprehensive E2E tests for an e-commerce application covering user registration, product browsing, cart management, and checkout process",
      "steps": [
        "Set up Playwright configuration with multiple browsers",
        "Create test fixtures for user authentication and test data",
        "Implement page object models for major application screens",
        "Write tests for user registration and login flows",
        "Create tests for product search and filtering",
        "Implement shopping cart functionality tests",
        "Add checkout process validation tests",
        "Configure visual regression testing for critical pages",
        "Set up parallel execution and CI/CD integration"
      ],
      "code": [
        "// playwright.config.ts",
        "import { defineConfig, devices } from '@playwright/test';",
        "",
        "export default defineConfig({",
        "  testDir: './tests',",
        "  fullyParallel: true,",
        "  forbidOnly: !!process.env.CI,",
        "  retries: process.env.CI ? 2 : 0,",
        "  workers: process.env.CI ? 1 : undefined,",
        "  reporter: [",
        "    ['html'],",
        "    ['junit', { outputFile: 'test-results/results.xml' }],",
        "  ],",
        "  use: {",
        "    baseURL: process.env.BASE_URL || 'http://localhost:3000',",
        "    trace: 'on-first-retry',",
        "    screenshot: 'only-on-failure',",
        "    video: 'retain-on-failure',",
        "  },",
        "  projects: [",
        "    {",
        "      name: 'chromium',",
        "      use: { ...devices['Desktop Chrome'] },",
        "    },",
        "    {",
        "      name: 'firefox',",
        "      use: { ...devices['Desktop Firefox'] },",
        "    },",
        "    {",
        "      name: 'webkit',",
        "      use: { ...devices['Desktop Safari'] },",
        "    },",
        "    {",
        "      name: 'Mobile Chrome',",
        "      use: { ...devices['Pixel 5'] },",
        "    },",
        "  ],",
        "  webServer: {",
        "    command: 'npm run start',",
        "    url: 'http://localhost:3000',",
        "    reuseExistingServer: !process.env.CI,",
        "  },",
        "});",
        "",
        "// tests/fixtures/auth.fixture.ts",
        "import { test as base, expect } from '@playwright/test';",
        "import { UserFactory } from '../factories/user.factory';",
        "",
        "type AuthFixtures = {",
        "  authenticatedUser: { email: string; password: string };",
        "  userFactory: UserFactory;",
        "};",
        "",
        "export const test = base.extend<AuthFixtures>({",
        "  userFactory: async ({}, use) => {",
        "    await use(new UserFactory());",
        "  },",
        "",
        "  authenticatedUser: async ({ page, userFactory }, use) => {",
        "    const user = await userFactory.create();",
        "    await page.goto('/login');",
        "    await page.fill('[data-testid=email]', user.email);",
        "    await page.fill('[data-testid=password]', user.password);",
        "    await page.click('[data-testid=login-button]');",
        "    await expect(page.locator('[data-testid=user-menu]')).toBeVisible();",
        "    await use({ email: user.email, password: user.password });",
        "  },",
        "});",
        "",
        "export { expect };",
        "",
        "// tests/e2e/checkout.spec.ts",
        "import { test } from '../fixtures/auth.fixture';",
        "import { HomePage } from '../pages/home.page';",
        "import { ProductPage } from '../pages/product.page';",
        "import { CartPage } from '../pages/cart.page';",
        "import { CheckoutPage } from '../pages/checkout.page';",
        "",
        "test.describe('Checkout Process', () => {",
        "  test('should complete checkout successfully', async ({ page, authenticatedUser }) => {",
        "    const homePage = new HomePage(page);",
        "    const productPage = new ProductPage(page);",
        "    const cartPage = new CartPage(page);",
        "    const checkoutPage = new CheckoutPage(page);",
        "",
        "    // Navigate to product and add to cart",
        "    await homePage.goto();",
        "    await homePage.searchForProduct('wireless headphones');",
        "    await homePage.clickFirstProduct();",
        "    ",
        "    await productPage.addToCart();",
        "    await expect(productPage.successMessage).toBeVisible();",
        "    ",
        "    // Proceed to checkout",
        "    await productPage.goToCart();",
        "    await cartPage.proceedToCheckout();",
        "    ",
        "    // Fill checkout information",
        "    await checkoutPage.fillShippingInformation({",
        "      firstName: 'John',",
        "      lastName: 'Doe',",
        "      address: '123 Main St',",
        "      city: 'New York',",
        "      zipCode: '10001',",
        "    });",
        "    ",
        "    await checkoutPage.selectPaymentMethod('credit_card');",
        "    await checkoutPage.placeOrder();",
        "    ",
        "    // Verify order confirmation",
        "    await expect(checkoutPage.orderConfirmation).toBeVisible();",
        "    await expect(checkoutPage.orderNumber).toContainText('ORD-');",
        "    ",
        "    // Take screenshot for visual regression",
        "    await page.screenshot({ path: 'checkout-confirmation.png' });",
        "  });",
        "",
        "  test('should validate required fields', async ({ page, authenticatedUser }) => {",
        "    const checkoutPage = new CheckoutPage(page);",
        "    await page.goto('/checkout');",
        "    ",
        "    await checkoutPage.placeOrder();",
        "    ",
        "    await expect(checkoutPage.firstNameError).toBeVisible();",
        "    await expect(checkoutPage.lastNameError).toBeVisible();",
        "    await expect(checkoutPage.addressError).toBeVisible();",
        "  });",
        "});"
      ],
      "outcomes": [
        "Comprehensive E2E test coverage for critical user flows",
        "Cross-browser testing with Chrome, Firefox, Safari, and mobile",
        "Parallel execution for faster test runs",
        "Visual regression testing for UI consistency",
        "CI/CD integration with automated test execution"
      ],
      "relevantFor": ["QA", "FrontendDev", "BackendDev"]
    }
  ],
  "performance": {
    "executionTime": {
      "min": 5,
      "max": 90,
      "average": 30
    },
    "resourceUsage": {
      "memory": "high",
      "cpu": "high",
      "network": "medium"
    },
    "complexity": "moderate",
    "successRate": 94,
    "knownIssues": [
      "Flaky tests due to timing issues and race conditions",
      "High resource consumption for parallel execution",
      "Test maintenance overhead with UI changes"
    ]
  },
  "metadata": {
    "createdAt": "2025-10-28T14:00:00Z",
    "updatedAt": "2025-10-28T14:00:00Z",
    "author": "Eduardo Menoncello",
    "versionHistory": [
      {
        "version": "1.0.0",
        "releasedAt": "2025-10-28T14:00:00Z",
        "notes": "Initial release with comprehensive Playwright test automation capabilities",
        "newFeatures": [
          "Browser automation and interaction",
          "Test organization and fixtures",
          "Parallel execution configuration",
          "Visual testing capabilities",
          "CI/CD integration patterns"
        ]
      }
    ],
    "tags": ["playwright", "testing", "automation", "e2e", "frontend", "quality-assurance"],
    "relatedSkills": {
      "similar": ["testing-cypress", "testing-selenium"],
      "complementary": ["unit-testing-jest", "api-testing", "performance-testing"],
      "alternative": ["testing-cypress", "testing-selenium"]
    },
    "resources": [
      {
        "type": "documentation",
        "title": "Playwright Official Documentation",
        "url": "https://playwright.dev/",
        "description": "Official Playwright documentation with comprehensive guides and API reference",
        "level": "beginner",
        "estimatedTime": 180
      },
      {
        "type": "tutorial",
        "title": "Playwright Best Practices",
        "url": "https://playwright.dev/docs/best-practices",
        "description": "Best practices for writing reliable and maintainable Playwright tests",
        "level": "intermediate",
        "estimatedTime": 90
      },
      {
        "type": "example",
        "title": "Playwright Testing Examples",
        "url": "https://github.com/microsoft/playwright/tree/main/examples",
        "description": "Collection of Playwright testing examples and patterns",
        "level": "beginner",
        "estimatedTime": 120
      }
    ],
    "usage": {
      "totalUses": 0,
      "uniqueAgents": 0,
      "satisfactionRating": 0,
      "commonUseCases": [
        "E2E testing of web applications",
        "Cross-browser compatibility testing",
        "Regression testing",
        "Performance testing scenarios"
      ],
      "trend": "increasing",
      "lastUpdated": "2025-10-28T14:00:00Z"
    },
    "quality": {
      "testCoverage": 90,
      "documentationScore": 95,
      "openIssues": 0,
      "communityRating": 0,
      "lastAssessed": "2025-10-28T14:00:00Z",
      "badges": [
        {
          "id": "test-automation-expert",
          "name": "Test Automation Expert",
          "description": "Advanced test automation expertise with Playwright",
          "awardedAt": "2025-10-28T14:00:00Z",
          "authority": "Menon Market Skills"
        }
      ]
    }
  }
}